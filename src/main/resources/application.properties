#conexao com o banco
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=${DATABASE_URL:jdbc:mysql://host.docker.internal:3306/bd_transacao?createDatabaseIfNotExist=true}
spring.datasource.username=${USERNAME_BD:root}
spring.datasource.password=${PASSWORD_BD:123}

#exibir as consultas 
spring.jpa.show-sql=true
server.error.include-stacktrace=never

# Endereço do Kafka
spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost:9092}
spring.kafka.topic.transactions=transacoes

# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:transacao-application}



## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/realm-transacao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/realm-transacao/protocol/openid-connect/certs}


# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}



# Endereço do Kafka
#spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost:9092}


# Formato da chave (String) recebida!
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Formato da mensagem \ evento (JSON) recebida(o)!
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Identificador do grupo de consumo
#spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:transacao-application}

# Modelo de coleta do consumidor (latest, earliest, none)
#spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}


spring.kafka.topic.transactions=transacoes